{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\components\\App.html",
    "..\\src\\components\\Counter.html"
  ],
  "sourcesContent": [
    "<script>\r\n  import { fade, fly } from 'svelte-transitions';\r\n  import Counter from './Counter.html';\r\n  export default {\r\n    tag: 'app1-app',\r\n    components: {\r\n      Counter\r\n    },\r\n    data: () => ({\r\n      foobar: 'foobarValue'\r\n    }),\r\n    methods: {\r\n      alertPopup(event) {\r\n        alert(JSON.stringify(event))\r\n        alert(this.get('name'))\r\n        alert(this.constructor.const1)\r\n      }\r\n    },\r\n    oncreate() {\r\n      const canvas = this.refs.canvas;\r\n      const ctx = canvas.getContext('2d');\r\n    },\r\n    setup(constructor) {\r\n      constructor.const1 = 'CONST1VALUE';\r\n    },\r\n    transitions: { fade, fly }\r\n  };\r\n</script>\r\n\r\n<canvas ref:canvas width='200' height='100'></canvas>\r\n\r\n<h1>Hello, <span class=\"logo-font\">{{name}}</span>. (store: name={{$name}})</h1>\r\n<input bind:value='name' placeholder='enter your name'><!-- two-way binding -->\r\n\r\n<ul>\r\n  {{#each games as game, i}}\r\n    <li ref:gameItem in:fly='{y: 50}' out:fade>#{{i + 1}} {{game}}</li>\r\n  {{/each}}\r\n</ul>\r\n\r\n{{#await promise}}\r\n  <p>wait for it...</p>\r\n{{then answer}}\r\n  <p>the answer is {{answer}}!</p>\r\n{{catch err}}\r\n  <p>well that's odd: {{err.message}}</p>\r\n{{/await}}\r\n\r\n<Counter isBig :foobar on:fakeEvent='alertPopup(event)' on:click='alertPopup(event)'>\r\n  <hr>\r\n  FOOTER SLOT\r\n  <hr>\r\n</Counter>\r\n\r\n<!-- Include styles -->\r\n<style>\r\n  h1 {\r\n    font-weight: 300;\r\n    font-family: Lato;\r\n  }\r\n  .logo-font {\r\n    text-transform: lowercase;\r\n    font-size: 2.5rem;\r\n    font-family: 'Rajdhani', sans-serif;\r\n    color: #aa1e1e;\r\n  }\r\n  ref:gameItem {\r\n    color: blue;\r\n  }\r\n</style>\r\n",
    "<script>\r\n  import leftPad from 'left-pad';\r\n\r\n  export default {\r\n    tag: 'app1-counter',\r\n    data: () => ({\r\n      count: 0,\r\n      time: new Date()\r\n    }),\r\n\r\n    methods: {\r\n      handleClick(event, count) {\r\n        event.preventDefault();\r\n        console.log('the count is', count);\r\n        this.set({ count_old: this.get('count'), count, time: new Date() });\r\n      }\r\n    },\r\n\r\n    helpers: {\r\n      pad: num => leftPad(num, 2, '0')\r\n    },\r\n\r\n    events: {\r\n      longpress(node, callback) {\r\n\r\n        function onmousedown(event) {\r\n          const timeout = setTimeout(() => callback( event ), 500);\r\n\r\n          function cancel() {\r\n            clearTimeout(timeout);\r\n            node.removeEventListener('mouseup', cancel, false);\r\n          }\r\n\r\n          node.addEventListener('mouseup', cancel, false);\r\n        }\r\n\r\n        node.addEventListener('mousedown', onmousedown, false);\r\n        return { teardown: () => node.removeEventListener('mousedown', onmousedown, false) };\r\n      }\r\n    },\r\n\r\n    computed: {\r\n      hours: time => time.getHours(),\r\n      minutes: time => time.getMinutes(),\r\n      seconds: time => time.getSeconds()\r\n    },\r\n\r\n    oncreate() {\r\n      this.store.observe('width', (newValue, oldValue) => {\r\n        if (!oldValue) return;\r\n        alert(`width=${newValue}`);\r\n      });\r\n    },\r\n    ondestroy() {}\r\n  };\r\n</script>\r\n\r\n<:Window on:keydown='set({ key: event.key, keyCode: event.keyCode })' bind:scrollY='y'/>\r\n\r\n<:Head>\r\n  <title>{{count}} â€¢ My App</title>\r\n</:Head>\r\n\r\n<div class=\"counter-page\">\r\n  {{#if key}}\r\n  <p><kbd>{{key === ' ' ? 'Space' : key}}</kbd> (code {{keyCode}})</p>\r\n  {{else}}\r\n  <p>click in this window and press any key</p>\r\n  {{/if}}\r\n\r\n  <p>user has scrolled {{y}} pixels</p>\r\n\r\n  {{#if count % 10 }}\r\n  <p>Count: {{count}} + 1 = {{count + 1}}</p>\r\n  {{else}}\r\n  <p>MOD 10 == 0 !</p>\r\n  {{/if}}\r\n\r\n  <button on:click='handleClick(event, count + 1)' on:longpress='handleClick(event, count + 10)'>+1</button>\r\n\r\n  <h2>Time is {{pad(hours)}}:{{pad(minutes)}}:{{pad(seconds)}}</h2>\r\n\r\n  <p>IS {{isBig ? 'BIG' : 'small' }}</p>\r\n  <p>{{foobar}}</p>\r\n\r\n  <div>Volume=<button on:click='store.set({ width: Math.random() })'>{{$volume}}</button></div>\r\n\r\n  <footer>\r\n    <slot>\r\n      <p>DEFAULT FOOTER CONTENT</p>\r\n    </slot>\r\n    <button on:click='fire(\"fakeEvent\", { a: 123 })'>FIRE EVENT</button>\r\n    <button on:click>CLICK EVENT</button>\r\n  </footer>\r\n</div>\r\n\r\n<!-- Include styles -->\r\n<style>\r\n  .counter-page {\r\n    border: 1px solid #eee;\r\n    padding: 1em;\r\n  }\r\n  p,\r\n  button {\r\n    font-family: Lato;\r\n  }\r\n  footer {\r\n    color: green;\r\n  }\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAwDE,EAAE,mBAAC,CAAC,AACF,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,UAAU,mBAAC,CAAC,AACV,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,MAAM,CACjB,WAAW,CAAE,UAAU,CAAC,CAAC,UAAU,CACnC,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,wCAAa,CAAC,AACZ,KAAK,CAAE,IAAI,AACb,CAAC;AC8BD,aAAa,mBAAC,CAAC,AACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,oBAAC,CACD,MAAM,mBAAC,CAAC,AACN,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,mBAAC,CAAC,AACN,KAAK,CAAE,KAAK,AACd,CAAC"
}